generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                Int       @id @default(autoincrement())
  username          String?   @unique // Make optional for OAuth users
  email             String    @unique
  password          String? // Make optional for OAuth users
  role              Int? // Make optional initially
  provider          String? // Add for OAuth
  providerAccountId String? // Add for OAuth
  image             String? // Add for profile pictures
  emailVerified     DateTime? // Add for email verification
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  student       Student?
  company       Company?
  documents     Document[]
  notifications Notification[]
  reports       Report[]
  sessions      Session[] // Add for NextAuth
  accountRole   AccountRole?   @relation(fields: [role], references: [id])

  @@unique([provider, providerAccountId])
}

model AccountRole {
  id   Int    @id @default(autoincrement())
  name String

  accounts Account[]
}

model Student {
  id         Int      @id @default(autoincrement())
  account_id Int      @unique
  student_id String
  name       String
  faculty    String
  year       Int
  phone      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  account      Account       @relation(fields: [account_id], references: [id])
  applications Application[]
}

model Company {
  id                  Int      @id @default(autoincrement())
  account_id          Int      @unique
  name                String
  address             String
  year                Int
  phone               String
  description         String
  register_day        DateTime
  registration_status String
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  account  Account    @relation(fields: [account_id], references: [id])
  jobPosts Job_Post[]
}

model Document {
  id          Int      @id @default(autoincrement())
  account_id  Int
  doc_type_id Int
  file_path   String
  filename    String
  created_at  DateTime @default(now())

  account      Account       @relation(fields: [account_id], references: [id])
  documentType Document_type @relation(fields: [doc_type_id], references: [id])
}

model Document_type {
  id        Int        @id @default(autoincrement())
  name      String
  documents Document[]
}

model Notification {
  id         Int      @id @default(autoincrement())
  account_id Int
  message    String
  created_at DateTime @default(now())

  account Account @relation(fields: [account_id], references: [id])
}

model Report {
  id         Int      @id @default(autoincrement())
  account_id Int
  report_id  Int
  post_id    Int
  type       String
  created_at DateTime @default(now())

  account Account @relation(fields: [account_id], references: [id])
}

model Job_Post {
  id          Int      @id @default(autoincrement())
  company_id  Int
  title       String
  description String
  min_salary  Int
  max_salary  Int
  deadline    DateTime
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  company      Company       @relation(fields: [company_id], references: [id])
  applications Application[]
  jobTags      Job_Tag[]     @relation("JobPostTags")
}

model Job_Tag {
  id       Int        @id @default(autoincrement())
  name     String
  jobPosts Job_Post[] @relation("JobPostTags")
}

model Application {
  id          Int      @id @default(autoincrement())
  job_post_id Int
  student_id  Int
  status      Int
  applied_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  jobPost           Job_Post           @relation(fields: [job_post_id], references: [id])
  student           Student            @relation(fields: [student_id], references: [id])
  applicationStatus Application_status @relation(fields: [status], references: [id])
}

model Application_status {
  id           Int           @id @default(autoincrement())
  name         String
  applications Application[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int      @map("user_id")
  expires      DateTime
  user         Account  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
