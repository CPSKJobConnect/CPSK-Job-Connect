generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                Int            @id @default(autoincrement())
  username          String?        @unique
  email             String         @unique
  password          String?
  role              Int?
  created_at        DateTime       @default(now())
  updated_at        DateTime       @updatedAt
  emailVerified     DateTime?
  provider          String?
  providerAccountId String?
  backgroundUrl     String?
  logoUrl           String?
  accountRole       AccountRole?   @relation(fields: [role], references: [id])
  company           Company?
  documents         Document[]
  notifications     Notification[]
  reports           Report[]
  student           Student?
  sessions          Session[]

  @@unique([provider, providerAccountId])
  @@index([email])
  @@index([role])
}

model AccountRole {
  id       Int       @id @default(autoincrement())
  name     String
  accounts Account[]
}

model Student {
  id           Int           @id @default(autoincrement())
  account_id   Int           @unique
  student_id   String
  name         String
  faculty      String
  year         String
  phone        String
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  transcript   String?
  applications Application[]
  savedJobs    SavedJob[]
  account      Account       @relation(fields: [account_id], references: [id], onDelete: Cascade)
}

model Company {
  id                  Int       @id @default(autoincrement())
  account_id          Int       @unique
  name                String
  address             String
  phone               String
  description         String
  register_day        DateTime
  registration_status String
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
  website             String?
  account             Account   @relation(fields: [account_id], references: [id], onDelete: Cascade)
  jobPosts            JobPost[]
}

model Document {
  id                    Int           @id @default(autoincrement())
  account_id            Int
  doc_type_id           Int
  file_path             String
  created_at            DateTime      @default(now())
  file_name             String
  portfolioApplications Application[] @relation("PortfolioDocument")
  resumeApplications    Application[] @relation("ResumeDocument")
  account               Account       @relation(fields: [account_id], references: [id])
  documentType          DocumentType  @relation(fields: [doc_type_id], references: [id])
}

model DocumentType {
  id        Int        @id @default(autoincrement())
  name      String
  documents Document[]
}

model Notification {
  id         Int      @id @default(autoincrement())
  account_id Int
  message    String
  created_at DateTime @default(now())
  account    Account  @relation(fields: [account_id], references: [id], onDelete: Cascade)
}

model Report {
  id         Int      @id @default(autoincrement())
  account_id Int
  report_id  Int
  post_id    Int
  type       String
  created_at DateTime @default(now())
  account    Account  @relation(fields: [account_id], references: [id])
}

model JobPost {
  id                 Int            @id @default(autoincrement())
  company_id         Int
  jobName            String
  location           String
  aboutRole          String
  responsibilities   String?
  requirements       String[]
  qualifications     String[]
  min_salary         Int
  max_salary         Int
  deadline           DateTime
  created_at         DateTime       @default(now())
  updated_at         DateTime       @updatedAt
  is_Published       Boolean        @default(true)
  job_arrangement_id Int
  job_type_id        Int
  job_category_id Int?
  applications       Application[]
  savedBy            SavedJob[]
  company            Company        @relation(fields: [company_id], references: [id], onDelete: Cascade)
  jobArrangement     JobArrangement @relation(fields: [job_arrangement_id], references: [id])
  jobType            JobType        @relation(fields: [job_type_id], references: [id])
  category        JobCategory? @relation(fields: [job_category_id], references: [id])
  tags               JobTag[]       @relation("JobTagesOnPosts")
}

model JobType {
  id    Int       @id @default(autoincrement())
  name  String    @unique
  posts JobPost[]
}

model JobArrangement {
  id    Int       @id @default(autoincrement())
  name  String    @unique
  posts JobPost[]
}

model JobCategory {
  id    Int       @id @default(autoincrement())
  name  String    @unique
  posts JobPost[]
}

model JobTag {
  id       Int       @id @default(autoincrement())
  name     String
  jobPosts JobPost[] @relation("JobTagesOnPosts")
}

model Application {
  id                Int               @id @default(autoincrement())
  job_post_id       Int
  student_id        Int
  status            Int
  applied_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
  portfolio_id      Int?
  resume_id         Int?
  jobPost           JobPost           @relation(fields: [job_post_id], references: [id], onDelete: Cascade)
  portfolioDocument Document?         @relation("PortfolioDocument", fields: [portfolio_id], references: [id])
  resumeDocument    Document?         @relation("ResumeDocument", fields: [resume_id], references: [id])
  applicationStatus ApplicationStatus @relation(fields: [status], references: [id])
  student           Student           @relation(fields: [student_id], references: [id])

  @@unique([student_id, job_post_id])
  @@index([student_id])
  @@index([job_post_id])
}

model ApplicationStatus {
  id           Int           @id @default(autoincrement())
  name         String
  applications Application[]
}

model SavedJob {
  id          Int      @id @default(autoincrement())
  student_id  Int
  job_post_id Int
  created_at  DateTime @default(now())

  student Student @relation(fields: [student_id], references: [id], onDelete: Cascade)
  jobPost JobPost @relation(fields: [job_post_id], references: [id], onDelete: Cascade)

  @@unique([student_id, job_post_id])
  @@index([student_id])
  @@index([job_post_id])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int      @map("user_id")
  expires      DateTime
  user         Account  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
